#ifndef KOMODO_GLOBALS_H
#define KOMODO_GLOBALS_H

#include <map>
#include <vector>
#include <cstdint>
#include <string>

#define NUM_KMD_SEASONS 8
#define NUM_KMD_NOTARIES 64
#define KOMODO_ASSETCHAIN_MAXLEN 65
#define _ASSETCHAINS_TIMELOCKOFF 0xffffffffffffffff
#define _ASSETCHAINS_EQUIHASH 0
#define ASSETCHAINS_MAX_ERAS 7

#define SETBIT(bits,bitoffset) (((uint8_t *)bits)[(bitoffset) >> 3] |= (1 << ((bitoffset) & 7)))
#define GETBIT(bits,bitoffset) (((uint8_t *)bits)[(bitoffset) >> 3] & (1 << ((bitoffset) & 7)))
#define CLEARBIT(bits,bitoffset) (((uint8_t *)bits)[(bitoffset) >> 3] &= ~(1 << ((bitoffset) & 7)))

extern bool KOMODO_LOADINGBLOCKS; // defined in pow.cpp, boolean, 1 if currently loading the block index, 0 if not
extern bool IS_KOMODO_NOTARY;
extern bool IS_MODE_EXCHANGEWALLET;
extern bool IS_KOMODO_DEALERNODE;
extern int32_t KOMODO_MININGTHREADS, STAKED_NOTARY_ID, USE_EXTERNAL_PUBKEY, ASSETCHAINS_SEED, KOMODO_ON_DEMAND, KOMODO_EXTERNAL_NOTARIES, KOMODO_REWIND, STAKED_ERA, KOMODO_CONNECTING, KOMODO_EXTRASATOSHI, ASSETCHAINS_FOUNDERS, ASSETCHAINS_CBMATURITY, KOMODO_NSPV;
extern int32_t KOMODO_INSYNC, KOMODO_LASTMINED, prevKOMODO_LASTMINED, KOMODO_CCACTIVATE, JUMBLR_PAUSE;
extern std::string NOTARY_PUBKEY, ASSETCHAINS_NOTARIES, ASSETCHAINS_OVERRIDE_PUBKEY, DONATION_PUBKEY, ASSETCHAINS_SCRIPTPUB, NOTARY_ADDRESS, ASSETCHAINS_SELFIMPORT, ASSETCHAINS_CCLIB;
extern uint8_t NOTARY_PUBKEY33[33], ASSETCHAINS_OVERRIDE_PUBKEY33[33], ASSETCHAINS_OVERRIDE_PUBKEYHASH[20], ASSETCHAINS_PUBLIC, ASSETCHAINS_PRIVATE, ASSETCHAINS_TXPOW;
extern int8_t ASSETCHAINS_ADAPTIVEPOW;
extern std::vector<std::string> vWhiteListAddress;
extern char NOTARYADDRS[64][64];
extern char NOTARY_ADDRESSES[NUM_KMD_SEASONS][64][64];

extern char ASSETCHAINS_SYMBOL[KOMODO_ASSETCHAIN_MAXLEN], ASSETCHAINS_USERPASS[4096];
extern uint16_t ASSETCHAINS_P2PPORT, ASSETCHAINS_RPCPORT, ASSETCHAINS_BEAMPORT, ASSETCHAINS_CODAPORT;
extern uint32_t ASSETCHAIN_INIT, ASSETCHAINS_CC, KOMODO_STOPAT, KOMODO_DPOWCONFS, STAKING_MIN_DIFF;
extern uint32_t ASSETCHAINS_MAGIC;
extern int64_t ASSETCHAINS_GENESISTXVAL;

extern int64_t MAX_MONEY;

// consensus variables for coinbase timelock control and timelock transaction support
extern uint64_t ASSETCHAINS_TIMELOCKGTE;
extern uint64_t ASSETCHAINS_TIMEUNLOCKFROM, ASSETCHAINS_TIMEUNLOCKTO;

extern uint64_t ASSETCHAINS_LASTERA;
extern uint64_t ASSETCHAINS_ENDSUBSIDY[ASSETCHAINS_MAX_ERAS+1], ASSETCHAINS_REWARD[ASSETCHAINS_MAX_ERAS+1], ASSETCHAINS_HALVING[ASSETCHAINS_MAX_ERAS+1], ASSETCHAINS_DECAY[ASSETCHAINS_MAX_ERAS+1], ASSETCHAINS_NOTARY_PAY[ASSETCHAINS_MAX_ERAS+1];
extern uint8_t ASSETCHAINS_CCDISABLES[256];
extern std::vector<std::string> ASSETCHAINS_PRICES, ASSETCHAINS_STOCKS;

extern uint32_t ASSETCHAINS_NUMALGOS;
extern const char *ASSETCHAINS_ALGORITHMS[];
extern uint64_t ASSETCHAINS_NONCEMASK[];
extern uint32_t ASSETCHAINS_NONCESHIFT[];
extern uint32_t ASSETCHAINS_HASHESPERROUND[];
extern uint32_t ASSETCHAINS_MINDIFF[];

extern int32_t ASSETCHAINS_SAPLING;
extern int32_t ASSETCHAINS_OVERWINTER;

extern uint64_t KOMODO_INTERESTSUM, KOMODO_WALLETBALANCE;
extern int32_t ASSETCHAINS_STAKED;
extern uint64_t ASSETCHAINS_COMMISSION, ASSETCHAINS_SUPPLY, ASSETCHAINS_FOUNDERS_REWARD;

extern uint32_t KOMODO_INITDONE;
extern char KMDUSERPASS[8192+512+1], BTCUSERPASS[8192];
extern uint16_t KMD_PORT, BITCOIND_RPCPORT, DEST_PORT;
extern uint64_t PENDING_KOMODO_TX;
extern unsigned int MAX_BLOCK_SIGOPS;

extern bool IS_KOMODO_TESTNODE;
extern int32_t KOMODO_SNAPSHOT_INTERVAL;
extern int32_t ASSETCHAINS_EARLYTXIDCONTRACT;
extern int32_t ASSETCHAINS_STAKED_SPLIT_PERCENTAGE;

extern std::map<int8_t, int32_t> mapHeightEvalActivate;
extern unsigned int WITNESS_CACHE_SIZE;
extern int32_t ASSETCHAINS_BLOCKTIME;
extern uint64_t ASSETCHAINS_NK[2];
extern uint32_t ASSETCHAINS_EQUIHASH;
extern uint32_t ASSETCHAINS_ALGO;

/** Maximum reorg length we will accept before we shut down and alert the user. */
static unsigned int MAX_REORG_LENGTH = 100 - 1; // based on COINBASE_MATURITY

#endif // KOMODO_GLOBALS_H
